Overview
========

A Telegram bot to provide ETA for public transport in ChiÈ™inÄƒu. A live instance is available at http://t.me/roataway_bot. 

The bot is written in Python and it was tested with 3.6, though earlier versions will work too, if you install the backported version of the ``dataclasses`` module.


How to run it
=============

#. Talk to @BotFather to register your bot and get a token, as described here: https://core.telegram.org/bots#6-botfather
#. Create the virtualenv ``virtualenv venv-infopanel-chatbot`` to install the dependencies in it
#. Activate the venv with ``source venv-infopanel-chatbot/bin/activate``
#. Install the dependencies with ``pip install -r requirements.txt``
#. Make a copy of ``res/config-sample.yaml`` to your own config file, e.g. ``config-development.yaml``, supplying the required information in the file
#. Run it with ``python main.py res/config-development.yaml``


Pipenv way
==========

#. Talk to @BotFather to register your bot and get a token, as described here: https://core.telegram.org/bots#6-botfather
#. Install pipenv ``pip install pipenv``
#. Then run ``pipenv install --dev``. It will deal automatically with the venv creation and dependecy installing
#. Make a copy of ``res/config-sample.yaml`` to your own config file, e.g. ``config-development.yaml``, supplying the required information in the file
#. Run it with ``python main.py res/config-development.yaml``


The credentials as well as the server connection details are deliberately not a part of this repository. They can be found on rtec.dekart.com/infodash. The ability to figure it out on your own is the qualification barrier for getting started with this bot. Note that ``infodash`` uses WebSTOMP, rather than MQTT; however, the credentials are the same.


Technical details
=================

The bot uses MQTT to subscribe to updates related to ETAs and the locations of trolleybuses.


Message formats
---------------

There are 2 types of messages that are received via MQTT at the moment:

1. ETA updates that look like this:
::

  {
    "eta": {
      "30": [
        [3, "3898"],
        [22, "3913"]
      ]
    },
    "station_id": 17,
    "name": "str. 31 August - sosire"
  }

2. Transport coordinates, which also come as JSON, containing the following keys:
::

  {
    "rtu_id": ...,
    "board": ...,
    "route": ...,
    "lat": ...,
    "lon": ...,
    "speed": ...,
    "dir": ...
  }

Station details
---------------

The information about supported stations is loaded from CSV files located in ``res/routes``, the format is ``station_id, station_order, station_name, direction``. The identifiers are generated by the RTEC database, we just have to assume they are constants. 


How to contribute
=================

For historical reasons, the code, comments and the instructions are written in English. Ideally, you should follow the same conventions. When opening issues, you can describe them in Romanian or Russian, besides English.

If you made any changes, send a pull request, explaining what you've done and why you've done it.

If you need any help, just ask.

Before commit
-------------
1. Run ``make autoformat`` to format all `.py` files
2. Run ``make verify`` and examine the output, looking for issues that need to be addressed


Bot configuration
=================

To set a lit of commands, go to @BotFather and send ``/setcommands`` for the bot, with the following data::

    prognosis - Vezi prognoza pentru o rutÄƒ
    feedback - Transmite sugestiile sau Ã®ntrebÄƒrile tale
    help - AflÄƒ cum Ã®È›i pot fi de folos
    about - Despre mine

Notes on obtaining ``feedback_chat_id``, it is a unique chat identifier, which you need if you want the bot to post messages somewhere. You can get this number using several methods:

#. Go to ``https://api.telegram.org/bot<token>/getUpdates`` and look around
#. Or add ``@RawDataBot`` to the group or the channel in question, and watch its debug output as you post a message. Don't forget to kick it out of the group once you've got the number.


Contributors and credits
========================

* Roata wÄƒy relies on an external data stream. None of the features of this bot would work without the backend and the hardware designed for deployment on the trolleybuses themselves.
* The production bot instance is hosted on a server generously provided by ``name withheld``.
* Initial proof of concept written by ``name withheld #2``.
* How about ðŸ‘‰ **you** ðŸ‘ˆ?
